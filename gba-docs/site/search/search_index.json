{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Je rassemble sur ces pages mes notes et documentations de mes exp\u00e9rimentations :-) Elles me sont d'abord destin\u00e9es mais si \u00e7a peut servir \u00e0 d'autres, autant les partager.","title":"Home"},{"location":"#home","text":"Je rassemble sur ces pages mes notes et documentations de mes exp\u00e9rimentations :-) Elles me sont d'abord destin\u00e9es mais si \u00e7a peut servir \u00e0 d'autres, autant les partager.","title":"Home"},{"location":"ip01/","text":"Installation de K3S et d\u00e9ploiement d'Influxdb, Prometheus et Grafana Documentation r\u00e9dig\u00e9e le 1er juin 2024. J'ai une Homey Pro pour contr\u00f4ler les objets connect\u00e9s de ma maison et l'appli Homey a beau n'\u00eatre pas trop mal, j'aime pouvoir stocker les donn\u00e9es en local et faire mes propres graphs. Cette petite doc a pour but de d\u00e9crire mon process d'installation d'un cluster Kubernetes K3S et le d\u00e9ploiement d'Influxdb, Prometheus et Grafana. Dans l'absolu, il n'est pas n\u00e9cessaire d'installer Prometheus. Influxdb2 est capable \u00e0 lui-seul de scraper et stocker les m\u00e9triques de la Homey Pro (via le plugin Prometheus sur le store) et Grafana pourra les r\u00e9cup\u00e9rer. Voyez cela comme un proof of concept. Cette documentation n'a pas pour objet d'entrer dans les d\u00e9tails et encore moins d'expliquer les concepts abord\u00e9s. Elle est volontairement succinte afin d'aboutir \u00e0 un r\u00e9sultat rapidement et il va sans dire qu'elle n'est pas \"production ready\" en terme de s\u00e9curit\u00e9 ou de disponibilit\u00e9.","title":"1. Pr\u00e9sentation du projet"},{"location":"ip01/#installation-de-k3s-et-deploiement-dinfluxdb-prometheus-et-grafana","text":"Documentation r\u00e9dig\u00e9e le 1er juin 2024. J'ai une Homey Pro pour contr\u00f4ler les objets connect\u00e9s de ma maison et l'appli Homey a beau n'\u00eatre pas trop mal, j'aime pouvoir stocker les donn\u00e9es en local et faire mes propres graphs. Cette petite doc a pour but de d\u00e9crire mon process d'installation d'un cluster Kubernetes K3S et le d\u00e9ploiement d'Influxdb, Prometheus et Grafana. Dans l'absolu, il n'est pas n\u00e9cessaire d'installer Prometheus. Influxdb2 est capable \u00e0 lui-seul de scraper et stocker les m\u00e9triques de la Homey Pro (via le plugin Prometheus sur le store) et Grafana pourra les r\u00e9cup\u00e9rer. Voyez cela comme un proof of concept. Cette documentation n'a pas pour objet d'entrer dans les d\u00e9tails et encore moins d'expliquer les concepts abord\u00e9s. Elle est volontairement succinte afin d'aboutir \u00e0 un r\u00e9sultat rapidement et il va sans dire qu'elle n'est pas \"production ready\" en terme de s\u00e9curit\u00e9 ou de disponibilit\u00e9.","title":"Installation de K3S et d\u00e9ploiement d'Influxdb, Prometheus et Grafana"},{"location":"ip02/","text":"Pr\u00e9requis Vous aurez juste besoin d'un PC/VM/serveur sous Linux avec un acc\u00e8s root ayant acc\u00e8s \u00e0 Internet. Cette doc se base sur l'OS Ubuntu Server 24.04 d\u00e9ploy\u00e9 sur un mini-PC Beelink BT Pro qui trainait chez moi et auquel j'acc\u00e8de en ssh via mon PC principal sous Windows. Pensez \u00e0 adapter certaines commandes si vous faites l'installation sous une autre distribution.","title":"2. Pr\u00e9requis"},{"location":"ip02/#prerequis","text":"Vous aurez juste besoin d'un PC/VM/serveur sous Linux avec un acc\u00e8s root ayant acc\u00e8s \u00e0 Internet. Cette doc se base sur l'OS Ubuntu Server 24.04 d\u00e9ploy\u00e9 sur un mini-PC Beelink BT Pro qui trainait chez moi et auquel j'acc\u00e8de en ssh via mon PC principal sous Windows. Pensez \u00e0 adapter certaines commandes si vous faites l'installation sous une autre distribution.","title":"Pr\u00e9requis"},{"location":"ip03/","text":"Installation de K3S L'installation de K3S est incroyablement simple. 1. Mise \u00e0 jour du syst\u00e8me sudo apt update && sudo apt upgrade -y 2. Installation de K3S curl -sfL https://get.k3s.io | sh - Vous pouvez v\u00e9rifier le statut du service K3S avec la commande suivante : sudo systemctl status k3s Son statut doit \u00eatre \u00e0 Active: active (running) 3. Configuration de kubectl k3s installe automatiquement kubectl, l'outil qui vous permettra d'int\u00e9ragir avec votre cluster Kubernetes en ligne de commande. Cr\u00e9ez une variable d'environnement poitant sur le fichier kubeconfig \"k3s.yaml\" : export KUBECONFIG=/etc/rancher/k3s/k3s.yaml Vous pouvez ajouter cette ligne dans votre fichier .bash_profile pour cr\u00e9er la variable \u00e0 chaque connexion au serveur. 4. Test Ex\u00e9cutez la commande suivante pour v\u00e9rifier que kubectl fonctionne correctement : kubectl get nodes NAME STATUS ROLES AGE VERSION gbaubu01p Ready control-plane,master 29h v1.29.5+k3s1 Vous devriez voir la liste des noeuds qui composent votre cluster. En l'occurence, nous avons install\u00e9 K3S sur un seul serveur, il n'y a donc qu'un seul noeud. Je vous invite \u00e0 consulter la doc K3S si vous souhaitez en ajouter.","title":"3. Installation de K3S"},{"location":"ip03/#installation-de-k3s","text":"L'installation de K3S est incroyablement simple.","title":"Installation de K3S"},{"location":"ip03/#1-mise-a-jour-du-systeme","text":"sudo apt update && sudo apt upgrade -y","title":"1. Mise \u00e0 jour du syst\u00e8me"},{"location":"ip03/#2-installation-de-k3s","text":"curl -sfL https://get.k3s.io | sh - Vous pouvez v\u00e9rifier le statut du service K3S avec la commande suivante : sudo systemctl status k3s Son statut doit \u00eatre \u00e0 Active: active (running)","title":"2. Installation de K3S"},{"location":"ip03/#3-configuration-de-kubectl","text":"k3s installe automatiquement kubectl, l'outil qui vous permettra d'int\u00e9ragir avec votre cluster Kubernetes en ligne de commande. Cr\u00e9ez une variable d'environnement poitant sur le fichier kubeconfig \"k3s.yaml\" : export KUBECONFIG=/etc/rancher/k3s/k3s.yaml Vous pouvez ajouter cette ligne dans votre fichier .bash_profile pour cr\u00e9er la variable \u00e0 chaque connexion au serveur.","title":"3. Configuration de kubectl"},{"location":"ip03/#4-test","text":"Ex\u00e9cutez la commande suivante pour v\u00e9rifier que kubectl fonctionne correctement : kubectl get nodes NAME STATUS ROLES AGE VERSION gbaubu01p Ready control-plane,master 29h v1.29.5+k3s1 Vous devriez voir la liste des noeuds qui composent votre cluster. En l'occurence, nous avons install\u00e9 K3S sur un seul serveur, il n'y a donc qu'un seul noeud. Je vous invite \u00e0 consulter la doc K3S si vous souhaitez en ajouter.","title":"4. Test"},{"location":"ip04/","text":"Installation d'Influxdb2 L\u00e0 encore l'installation est relativement simple. Il faut toutefois avoir quelques connaissances de base sur Kubernetes pour comprendre ce que l'on fait. 1. Cr\u00e9ation du namespace influxdb kubectl create namespace influxdb 2. Cr\u00e9ation du manifest de d\u00e9ploiement Cr\u00e9ez un fichier influxdb2.yaml. Le manifest est \u00e0 adapter selon vos besoins (stockage et port notamment). apiVersion: v1 kind: PersistentVolumeClaim metadata: name: influxdb-pvc namespace: influxdb spec: accessModes: - ReadWriteOnce resources: requests: storage: 8Gi # Valeur \u00e0 adapter --- apiVersion: apps/v1 kind: Deployment metadata: name: influxdb namespace: influxdb spec: replicas: 1 selector: matchLabels: app: influxdb template: metadata: labels: app: influxdb spec: containers: - name: influxdb image: influxdb:2.7.6 ports: - containerPort: 8086 volumeMounts: - name: influxdb-storage mountPath: /var/lib/influxdb2 volumes: - name: influxdb-storage persistentVolumeClaim: claimName: influxdb-pvc --- apiVersion: v1 kind: Service metadata: name: influxdb namespace: influxdb spec: selector: app: influxdb ports: - protocol: TCP port: 8086 targetPort: 8086 type: LoadBalancer 3. Appliquer le manifest kubectl apply -f influxdb2.yaml -n influxdb Nous avons d\u00e9ploy\u00e9 un service de type LoadBalancer. Cela signifie que l'on peut acc\u00e9der \u00e0 l'UI Influxdb2 en dehors du cluster kubernetes et sans port-forward via l'url http://ip-du-serveur:8086 . En l'occurence http://192.168.1.38:8086 . kubectl get svc -n influxdb NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE influxdb LoadBalancer 10.43.230.4 192.168.1.38 8086:32474/TCP 7h32m","title":"4. Installation d'Influxdb2"},{"location":"ip04/#installation-dinfluxdb2","text":"L\u00e0 encore l'installation est relativement simple. Il faut toutefois avoir quelques connaissances de base sur Kubernetes pour comprendre ce que l'on fait.","title":"Installation d'Influxdb2"},{"location":"ip04/#1-creation-du-namespace-influxdb","text":"kubectl create namespace influxdb","title":"1. Cr\u00e9ation du namespace influxdb"},{"location":"ip04/#2-creation-du-manifest-de-deploiement","text":"Cr\u00e9ez un fichier influxdb2.yaml. Le manifest est \u00e0 adapter selon vos besoins (stockage et port notamment). apiVersion: v1 kind: PersistentVolumeClaim metadata: name: influxdb-pvc namespace: influxdb spec: accessModes: - ReadWriteOnce resources: requests: storage: 8Gi # Valeur \u00e0 adapter --- apiVersion: apps/v1 kind: Deployment metadata: name: influxdb namespace: influxdb spec: replicas: 1 selector: matchLabels: app: influxdb template: metadata: labels: app: influxdb spec: containers: - name: influxdb image: influxdb:2.7.6 ports: - containerPort: 8086 volumeMounts: - name: influxdb-storage mountPath: /var/lib/influxdb2 volumes: - name: influxdb-storage persistentVolumeClaim: claimName: influxdb-pvc --- apiVersion: v1 kind: Service metadata: name: influxdb namespace: influxdb spec: selector: app: influxdb ports: - protocol: TCP port: 8086 targetPort: 8086 type: LoadBalancer","title":"2. Cr\u00e9ation du manifest de d\u00e9ploiement"},{"location":"ip04/#3-appliquer-le-manifest","text":"kubectl apply -f influxdb2.yaml -n influxdb Nous avons d\u00e9ploy\u00e9 un service de type LoadBalancer. Cela signifie que l'on peut acc\u00e9der \u00e0 l'UI Influxdb2 en dehors du cluster kubernetes et sans port-forward via l'url http://ip-du-serveur:8086 . En l'occurence http://192.168.1.38:8086 . kubectl get svc -n influxdb NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE influxdb LoadBalancer 10.43.230.4 192.168.1.38 8086:32474/TCP 7h32m","title":"3. Appliquer le manifest"},{"location":"ip05/","text":"Installation de Prometheus Le process de d\u00e9ploiement est similaire \u00e0 celui d'Influxdb2. 1. Cr\u00e9ation du namespace prometheus kubectl create namespace prometheus 2. Cr\u00e9ation du manifest de d\u00e9ploiement Cr\u00e9ez un fichier prometheus.yaml. Le manifest est \u00e0 adapter selon vos besoins (port notamment). Notez les lignes concernant la r\u00e9cup\u00e9ration des m\u00e9triques de la box Homey Pro (ip_homey_pro:9414) dans la configmap pour le fichier de configuration de Prometheus. C'est \u00e9videmment \u00e0 adapter \u00e0 votre environnement. apiVersion: v1 kind: ConfigMap metadata: name: prometheus-config namespace: prometheus data: prometheus.yml: | global: scrape_interval: 15s scrape_configs: - job_name: 'kubernetes-nodes' kubernetes_sd_configs: - role: node - job_name: 'kubernetes-pods' kubernetes_sd_configs: - role: pod - job_name: 'homey' static_configs: - targets: [\"localhost:9090\",\"192.168.1.35:9414\"] --- apiVersion: apps/v1 kind: Deployment metadata: name: prometheus namespace: prometheus spec: replicas: 1 selector: matchLabels: app: prometheus template: metadata: labels: app: prometheus spec: containers: - name: prometheus image: prom/prometheus args: - \"--config.file=/etc/prometheus/prometheus.yml\" ports: - containerPort: 9090 volumeMounts: - name: prometheus-config-volume mountPath: /etc/prometheus volumes: - name: prometheus-config-volume configMap: name: prometheus-config --- apiVersion: v1 kind: Service metadata: name: prometheus namespace: prometheus spec: selector: app: prometheus ports: - protocol: TCP port: 9090 targetPort: 9090 type: LoadBalancer 3. Appliquer le manifest kubectl apply -f prometheus.yaml -n prometheus Nous avons d\u00e9ploy\u00e9 un service de type LoadBalancer. Cela signifie que l'on peut acc\u00e9der \u00e0 l'UI Prometheus en dehors du cluster kubernetes et sans port-forward via l'url http://ip-du-serveur:9090 . En l'occurence http://192.168.1.38:9090 . kubectl get svc -n prometheus NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE prometheus LoadBalancer 10.43.247.132 192.168.1.38 9090:31105/TCP 8h","title":"5. Installation de Prometheus"},{"location":"ip05/#installation-de-prometheus","text":"Le process de d\u00e9ploiement est similaire \u00e0 celui d'Influxdb2.","title":"Installation de Prometheus"},{"location":"ip05/#1-creation-du-namespace-prometheus","text":"kubectl create namespace prometheus","title":"1. Cr\u00e9ation du namespace prometheus"},{"location":"ip05/#2-creation-du-manifest-de-deploiement","text":"Cr\u00e9ez un fichier prometheus.yaml. Le manifest est \u00e0 adapter selon vos besoins (port notamment). Notez les lignes concernant la r\u00e9cup\u00e9ration des m\u00e9triques de la box Homey Pro (ip_homey_pro:9414) dans la configmap pour le fichier de configuration de Prometheus. C'est \u00e9videmment \u00e0 adapter \u00e0 votre environnement. apiVersion: v1 kind: ConfigMap metadata: name: prometheus-config namespace: prometheus data: prometheus.yml: | global: scrape_interval: 15s scrape_configs: - job_name: 'kubernetes-nodes' kubernetes_sd_configs: - role: node - job_name: 'kubernetes-pods' kubernetes_sd_configs: - role: pod - job_name: 'homey' static_configs: - targets: [\"localhost:9090\",\"192.168.1.35:9414\"] --- apiVersion: apps/v1 kind: Deployment metadata: name: prometheus namespace: prometheus spec: replicas: 1 selector: matchLabels: app: prometheus template: metadata: labels: app: prometheus spec: containers: - name: prometheus image: prom/prometheus args: - \"--config.file=/etc/prometheus/prometheus.yml\" ports: - containerPort: 9090 volumeMounts: - name: prometheus-config-volume mountPath: /etc/prometheus volumes: - name: prometheus-config-volume configMap: name: prometheus-config --- apiVersion: v1 kind: Service metadata: name: prometheus namespace: prometheus spec: selector: app: prometheus ports: - protocol: TCP port: 9090 targetPort: 9090 type: LoadBalancer","title":"2. Cr\u00e9ation du manifest de d\u00e9ploiement"},{"location":"ip05/#3-appliquer-le-manifest","text":"kubectl apply -f prometheus.yaml -n prometheus Nous avons d\u00e9ploy\u00e9 un service de type LoadBalancer. Cela signifie que l'on peut acc\u00e9der \u00e0 l'UI Prometheus en dehors du cluster kubernetes et sans port-forward via l'url http://ip-du-serveur:9090 . En l'occurence http://192.168.1.38:9090 . kubectl get svc -n prometheus NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE prometheus LoadBalancer 10.43.247.132 192.168.1.38 9090:31105/TCP 8h","title":"3. Appliquer le manifest"},{"location":"ip06/","text":"Installation de Grafana Le process de d\u00e9ploiement est similaire \u00e0 celui d'Influxdb2 et Prometheus. 1. Cr\u00e9ation du namespace prometheus kubectl create namespace grafana 2. Cr\u00e9ation du manifest de d\u00e9ploiement Cr\u00e9ez un fichier grafana.yaml. Le manifest est \u00e0 adapter selon vos besoins (stockage et port notamment). apiVersion: v1 kind: PersistentVolumeClaim metadata: name: grafana-pvc namespace: grafana spec: accessModes: - ReadWriteOnce resources: requests: storage: 8Gi --- apiVersion: apps/v1 kind: Deployment metadata: name: grafana namespace: grafana spec: replicas: 1 selector: matchLabels: app: grafana template: metadata: labels: app: grafana spec: containers: - name: grafana image: grafana/grafana ports: - containerPort: 3000 volumeMounts: - name: grafana-storage mountPath: /var/lib/grafana volumes: - name: grafana-storage persistentVolumeClaim: claimName: grafana-pvc --- apiVersion: v1 kind: Service metadata: name: grafana namespace: grafana spec: selector: app: grafana ports: - protocol: TCP port: 3000 targetPort: 3000 type: LoadBalancer 3. Appliquer le manifest kubectl apply -f grafana.yaml -n grafana Nous avons d\u00e9ploy\u00e9 un service de type LoadBalancer. Cela signifie que l'on peut acc\u00e9der \u00e0 l'UI Grafana en dehors du cluster kubernetes et sans port-forward via l'url http://ip-du-serveur:3000 . En l'occurence http://192.168.1.38:3000 . kubectl get svc -n grafana NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE grafana LoadBalancer 10.43.218.86 192.168.1.38 3000:32559/TCP 8h","title":"6. Installation de Grafana"},{"location":"ip06/#installation-de-grafana","text":"Le process de d\u00e9ploiement est similaire \u00e0 celui d'Influxdb2 et Prometheus.","title":"Installation de Grafana"},{"location":"ip06/#1-creation-du-namespace-prometheus","text":"kubectl create namespace grafana","title":"1. Cr\u00e9ation du namespace prometheus"},{"location":"ip06/#2-creation-du-manifest-de-deploiement","text":"Cr\u00e9ez un fichier grafana.yaml. Le manifest est \u00e0 adapter selon vos besoins (stockage et port notamment). apiVersion: v1 kind: PersistentVolumeClaim metadata: name: grafana-pvc namespace: grafana spec: accessModes: - ReadWriteOnce resources: requests: storage: 8Gi --- apiVersion: apps/v1 kind: Deployment metadata: name: grafana namespace: grafana spec: replicas: 1 selector: matchLabels: app: grafana template: metadata: labels: app: grafana spec: containers: - name: grafana image: grafana/grafana ports: - containerPort: 3000 volumeMounts: - name: grafana-storage mountPath: /var/lib/grafana volumes: - name: grafana-storage persistentVolumeClaim: claimName: grafana-pvc --- apiVersion: v1 kind: Service metadata: name: grafana namespace: grafana spec: selector: app: grafana ports: - protocol: TCP port: 3000 targetPort: 3000 type: LoadBalancer","title":"2. Cr\u00e9ation du manifest de d\u00e9ploiement"},{"location":"ip06/#3-appliquer-le-manifest","text":"kubectl apply -f grafana.yaml -n grafana Nous avons d\u00e9ploy\u00e9 un service de type LoadBalancer. Cela signifie que l'on peut acc\u00e9der \u00e0 l'UI Grafana en dehors du cluster kubernetes et sans port-forward via l'url http://ip-du-serveur:3000 . En l'occurence http://192.168.1.38:3000 . kubectl get svc -n grafana NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE grafana LoadBalancer 10.43.218.86 192.168.1.38 3000:32559/TCP 8h","title":"3. Appliquer le manifest"},{"location":"ip07/","text":"Un peu plus loin et conclusion 1. Ajouter le scraper Homey dans l'UI Influxdb2 Cr\u00e9er un bucket (Load data -> Buckets -> Create bucket) Cr\u00e9er un scraper (Load data -> Scrappers -> Create scraper) en lui affectant le bucket pr\u00e9c\u00e9dement cr\u00e9\u00e9 et en indiquant l'url des m\u00e9triques Homey : (http://ip-box-homey:9414/metrics) Faites votre premi\u00e8re requ\u00eate : 2. Ajouter la data source dans Grafana Toujours dans l'UI Influxdb2, r\u00e9cup\u00e9rer ou cr\u00e9er un token (Load data -> Tokens) Dans l'UI Grafana, d\u00e9rouler \"Connections\" puis cliquer sur \"Data sources\" Cliquer sur \"Add new data source\" Chercher \"influxdb\", cliquer sur l'icone puis remplir le formulaire. Vous pourrez utiliser votre token dans les param\u00e8tres de connexion \u00e0 la base Influxdb.","title":"7. Un peu plus loin"},{"location":"ip07/#un-peu-plus-loin-et-conclusion","text":"","title":"Un peu plus loin et conclusion"},{"location":"ip07/#1-ajouter-le-scraper-homey-dans-lui-influxdb2","text":"Cr\u00e9er un bucket (Load data -> Buckets -> Create bucket) Cr\u00e9er un scraper (Load data -> Scrappers -> Create scraper) en lui affectant le bucket pr\u00e9c\u00e9dement cr\u00e9\u00e9 et en indiquant l'url des m\u00e9triques Homey : (http://ip-box-homey:9414/metrics) Faites votre premi\u00e8re requ\u00eate :","title":"1. Ajouter le scraper Homey dans l'UI Influxdb2"},{"location":"ip07/#2-ajouter-la-data-source-dans-grafana","text":"Toujours dans l'UI Influxdb2, r\u00e9cup\u00e9rer ou cr\u00e9er un token (Load data -> Tokens) Dans l'UI Grafana, d\u00e9rouler \"Connections\" puis cliquer sur \"Data sources\" Cliquer sur \"Add new data source\" Chercher \"influxdb\", cliquer sur l'icone puis remplir le formulaire. Vous pourrez utiliser votre token dans les param\u00e8tres de connexion \u00e0 la base Influxdb.","title":"2. Ajouter la data source dans Grafana"}]}